/*
* Soution to Connected Cell Grid: https://www.hackerrank.com/challenges/connected-cell-in-a-grid
*/

import java.util.Scanner;
import java.util.Stack;

class Node {
	int i;
	int j;
	boolean visited;
	Node(int i, int j) {
		this.i = i;
		this.j = j;
	}
	
	public int getI() {
		return i;
	}
	public int getJ() {
		return j;
	}
}

public class ConnectedCellInGrid {
	static int findRegion(int[][] matrix, int i, int j, int m, int n) {
		Stack<Node> stack = new Stack<Node>();
		
		
		stack.add(new Node(i, j));
		
		int count = 0;
		
		while(!stack.isEmpty()){
			
			Node node = stack.pop();
			int x = node.getI();
			int y = node.getJ();

			if(matrix[x][y] == 1) {
				count++;
			}
			matrix[x][y] = 2; // changing value of visited elements
			
			
			if(x > 0 && matrix[x-1][y] == 1) {
				stack.push(new Node(x-1, y));
			}
			
			if(y > 0 && matrix[x][y - 1] == 1) {
				stack.push(new Node(x, y - 1));
			}
			
			if(x + 1 < m && matrix[x+1][y] == 1) {
				stack.push(new Node(x+ 1, y));
			}
			
			if(y + 1 < n && matrix[x][y+1] == 1) {
				stack.push(new Node(x, y + 1));
			}
			
			if(x > 0 && y > 0 && matrix[x-1][y-1] == 1) {
				stack.push(new Node(x-1, y-1));
			}
			
			if(x + 1 < m && y + 1 < n && matrix[x + 1][y + 1] == 1) {
				stack.push(new Node(x + 1, y + 1));
			}
			
			if(x > 0 && y + 1 < n && matrix[x-1][y+1] == 1) {
				stack.push(new Node(x -1 , y + 1));
				
			}
			
			if(y > 0 && x + 1 < m && matrix[x+1][y-1] == 1) {
				stack.push(new Node(x  + 1 , y - 1));
				
			}
		}
		return count;
	}
	  public static void main(String[] args) {
	        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
		  
			  Scanner in = new Scanner(System.in);
		  
		  int m = in.nextInt();
		  int n = in.nextInt();
		  
		  int[][] matrix = new int[m][n];
		  
		  for(int i = 0 ; i < m ; i++) {
			  for(int j = 0 ; j < n ; j++) {
				  matrix[i][j] = in.nextInt();
			  }
		  }
		  
		  int largestRegion = Integer.MIN_VALUE;
		  
		  for(int i = 0 ; i < m ; i++) {
			  for(int j = 0 ; j < n; j++) {
				  int current = findRegion(matrix, i, j, m, n);
				  if(current > largestRegion) {
					  largestRegion = current;
				  }
			  }
		  }
		  System.out.println(largestRegion);
    }
}
